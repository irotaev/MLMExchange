@using MLMExchange.Lib
@using MLMExchange.Areas.AdminPanel.Models.User
@using Ext.Net
@using Ext.Net.MVC

@model object

@{
  BiddingParticipateApplicationStateModel castedModel = Model as BiddingParticipateApplicationStateModel;
}

@helper NotFiledState(BiddingParticipateApplicationModel model)
{
  using (Html.BeginForm("BiddingParticipateApplicationApply", "BiddingParticipateApplication", FormMethod.Post, new { enctype = "multipart/form-data", @class = "b-f" }))
  {
    <div class="b-ib input-control text">
      @(Html.CustomValidationMessageFor(x => (x as BiddingParticipateApplicationModel).MyCryptCount))

      <div class="b-ib__content-wrapper">
        <div class="b-ib__info-helper" data-ot="@MLMExchange.Properties.ResourcesA.MyCryptNumber" data-ot-style="BlackStyle">
          <i class="b-ib__info-icon fa fa-question"></i>
        </div>

        <div class="b-ib__input-content">
          <label class="b-ib__label">@MLMExchange.Properties.ResourcesA.MyCryptNumber</label>
          @Html.TextBoxFor(x => (x as BiddingParticipateApplicationModel).MyCryptCount,
              new { type = "text", placeholder = @MLMExchange.Properties.ResourcesA.MyCryptNumber, @class = "b-ib__input b-ib__input_type_blue" })
          <button class="btn-clear"></button>
        </div>
      </div>
    </div>

    <input style="position: absolute; visibility: hidden;" id="pb-bpa__submit-btn"
           class="b-button b-button_color_green-sea register-button b-button_hover-animate_opacity pb-button_size-admin-default" type="submit" value=@MLMExchange.Properties.ResourcesA.ApplyButton />

    <div class="pb-bpa__submit-btn-wrappper">
      <a href="#" class="b-btn b-btn-flat-action pb-bpa__submit-btn" onclick="javascript: $('#pb-bpa__submit-btn').click();">
        <i class="fa fa-sign-out fa-lg"></i>
        @MLMExchange.Properties.ResourcesA.ApplyButton
      </a>
    </div>

    @*<div class="b-text pb-bpa__remaning-applications">@(String.Format(MLMExchange.Properties.ResourcesA.RemaningApplication, 1))<i class="b-bpa__icon fa fa-search"></i></div>*@
  }
}

@helper BuyerFoundState(List<MLMExchange.Areas.AdminPanel.Models.User.SalesPeople.BuyingMyCryptRequestModel> model)
{
  var X = Html.X();

  <script>
    function commandClickHandler(command, record) {
      var confirmTitle = "@MLMExchange.Properties.ResourcesA.ConfirmActionTitle";

      if (command == "Denied") {
        var confirmMessage = "@String.Format(MLMExchange.Properties.ResourcesA.ConfirmActionMessage, MLMExchange.Properties.ResourcesA.Denied)";

        Ext.MessageBox.confirm(confirmTitle, confirmMessage, function (btn) {
          if (btn == "yes")
            window.location.href = "/BiddingParticipateApplication/Denied/?buyingMyCryptRequestId=" + record.data.Id;
        });
      }
      else if (command == "Accept") {
        var confirmMessage = "@String.Format(MLMExchange.Properties.ResourcesA.ConfirmActionMessage, MLMExchange.Properties.ResourcesA.Accept)";

        Ext.MessageBox.confirm(confirmTitle, confirmMessage, function (btn) {
          if (btn == "yes")
            window.location.href = "/BiddingParticipateApplication/Accept/?buyingMyCryptRequestId=" + record.data.Id;
        });
      }
    }
  </script>

  <div class="pb-bpa__buyer-found-wrapper" id="pb-bpa__buyer-found-wrapper_ID">
    @(
 X.GridPanel()
    .Layout(LayoutType.Fit)
    .Header(false)
    .Border(false)
    .Store(
      X.Store()
      .RemotePaging(true)
      .PageSize(10)
      .DataSource(model)
      .Model(X.Model().Fields(
          new ModelField { Name = "Id", ServerMapping = "Id" },
          new ModelField { Name = "Buyer__Name", ServerMapping = "Buyer.Name" },
          new ModelField { Name = "Buyer__Sername", ServerMapping = "Buyer.Surname" },
          new ModelField { Name = "MyCryptCount", ServerMapping = "MyCryptCount" }
      )))
      .ColumnModel(
        X.RowNumbererColumn(),
        X.Column().Text(Logic.Properties.GeneralResources.Name).DataIndex("Buyer__Name").Flex(1),
        X.Column().Text(Logic.Properties.GeneralResources.Surname).DataIndex("Buyer__Sername").Flex(1),
        X.Column().Text(Logic.Properties.GeneralResources.MyCryptCount).DataIndex("MyCryptCount").Flex(1),
        X.ImageCommandColumn().Commands(
          X.ImageCommand().CommandName("Denied").Icon(Icon.Decline).Text(MLMExchange.Properties.ResourcesA.Denied),
          X.ImageCommand().CommandName("Accept").Icon(Icon.Accept).Text(MLMExchange.Properties.ResourcesA.Accept)
        )
        .Listeners(ls =>
        {
          ls.Command.Handler = String.Format("commandClickHandler(command, record);");
        }))
      .RenderTo("pb-bpa__buyer-found-wrapper_ID"))
  </div>
}

@helper AcceptedState(BiddingParticipateApplicationAcceptedModel model)
{
  var buyer = model.Buyer;

  <div class="pb-bpa__buyer-accepted-wrapper">
    <div class="pb-bpa__buyer-short-info">
      <a href="/AdminPanel/User/Browse?objectId=@buyer.Id"><span class="pb-bpa__text">@buyer.Login</span></a> <span class="pb-bpa__buyer">( @Logic.Properties.GeneralResources.Buyer )</span>
    </div>

    <div class="pb-bpa__buyer-additional-info">
      <div class="pb-bpa__buyer-photo">
        <img src="@(new MLMExchange.Lib.Image.Image(buyer.PhotoRelativePath).Crop(68, 68).FullNameAndPath)"
             class="pb-bpa__image" alt="@MLMExchange.Properties.ResourcesA.UserPhoto">
      </div>

      <div class="pb-bpa__user-info">
        <div class="pb-bpa__text pb-bpa__user-surname">@buyer.Surname</div>
        <div class="pb-bpa__text pb-bpa__user-name">@buyer.Name</div>
        <div class="pb-bpa__text pb-bpa__user-patronymic">@buyer.Patronymic</div>
      </div>

      @if (model.PaymentIds.Count() != 0)
      {
        <div class="pb-bpa__payment" onclick="javascript: showPaymentCheck(this);" data-payment-system-ids="[@(String.Join(",", model.PaymentIds))]">
          <span class="pb-bpa__payment-showPayment">@MLMExchange.Properties.ResourcesA.ShowPayment</span>
        </div>
      }
    </div>

    @if (!model.IsSellerInterestRate_NeedSubstantialMoney)
    {
      <script>
        var confirmTitle = "@MLMExchange.Properties.ResourcesA.ConfirmActionTitle";

        function loadingMask__show(isLoading) {
          var loadingMask = new Ext.LoadMask(Ext.getBody(), { msg: "Please wait..." });
          if (isLoading)
            loadingMask.show();
          else
            loadingMask.hide();
        }

        function showPaymentCheck(obj) {
          var paymentIds = $(obj).data("payment-system-ids");

          loadingMask__show(true);

          new Ext.Window({
            id: "PaymentCheck__Window",
            width: 500,
            height: 400,
            resizable: false,
            modal: true,
            title: "@MLMExchange.Properties.ResourcesA.ShowPayment",
            loader: {
              url: "/AdminPanel/BasePayment/List",
              params: { PaymentSystemIds: paymentIds, AsPartial: "True" },
              ajaxOptions: { method: "GET" },
              nocache: true,
              text: "@MLMExchange.Properties.ResourcesA.Loading",
              callback: function () {
                loadingMask__show(false);
              }
            }
          }).show();
        }

        function acceptedState__InterestRatePaymentApproved(obj) {
          var confirmMessage = "@String.Format(MLMExchange.Properties.ResourcesA.ConfirmActionMessage, MLMExchange.Properties.PrivateResource.PaymentApproved)";

          var confirmWindow = Ext.MessageBox.confirm(confirmTitle, confirmMessage, function (btn) {
            if (btn == "yes") {
              $.ajax({
                url: "/BiddingParticipateApplication/SellerInterestRatePayment_Accepted/?tradeSessionId=@(model.TradingSessionId)",
                type: "POST"
              }).done(function () {
                window.location.reload();
              });
            }
          });
        }

        function acceptedState__InterestRatePaymentNotApproved(obj) {
          var confirmMessage = "@String.Format(MLMExchange.Properties.ResourcesA.ConfirmActionMessage, MLMExchange.Properties.PrivateResource.PaymentApproved)";

          var confirmWindow = Ext.MessageBox.confirm(confirmTitle, confirmMessage, function (btn) {
            if (btn == "yes") {
              $.ajax({
                url: "/BiddingParticipateApplication/SellerInterestRatePayment_Denied/?tradeSessionId=@(model.TradingSessionId)",
                type: "POST"
              }).done(function () {
                window.location.reload();
              });
            }
          });
        }
      </script>

      <div class="pb-bpa__action-buttons">
        <a href="#" class="b-btn b-btn-flat-caution pb-bpa__action-button pb-bpa__action-button_action_not-approved" onclick="javascript: acceptedState__InterestRatePaymentNotApproved(this);">
          <i class="fa fa-ban fa-lg"></i>
          @MLMExchange.Properties.PrivateResource.PaymentNotApproved
        </a>

        <a href="#" class="b-btn b-btn-flat-action pb-bpa__action-button pb-bpa__action-button_action_approved" onclick="javascript: acceptedState__InterestRatePaymentApproved(this);">
          <i class="fa fa-check-circle fa-lg"></i>
          @MLMExchange.Properties.PrivateResource.PaymentApproved
        </a>
      </div>
    }
    else
    {
      <div class="pb-bpa__waiting-saller-interest-rate-payment">
        @MLMExchange.Properties.PrivateResource.WaitingSellerInterestRatePayment
      </div>
    }
  </div>
}

@{
  if (!castedModel.IsBanned)
  {
    switch ((Model as IBaseBiddingParticipateApplicationModel).State)
    {
      case ApplicationState.NA:
      case ApplicationState.NotFiled:
        <section class="pb-bpa b-ab">
          <header class="b-ab__title"><i class="b-ab__icon fa fa-tasks"></i>@Logic.Properties.GeneralResources.BiddingParticipateApplication</header>

          <div class="b-ab__content pb-bpa__content">
            @NotFiledState((Model as IBiddingParticipateApplicationNotFiledModel).BiddingParticipateApplicationModel)
          </div>
        </section><!--B: Bindding participate application-->
        break;

      case ApplicationState.ExpectsBuyers:
      <section class="pb-bpa b-ab">
        <header class="b-ab__title"><i class="b-ab__icon fa fa-tasks"></i>@Logic.Properties.GeneralResources.BiddingParticipateApplication</header>

        <div class="b-ab__content pb-bpa__content">
          <div class="pb-bpa__waiting-user-response">
            <p class="pb-bpa__text b-text">@MLMExchange.Properties.PrivateResource.WaitingUserResponse</p>
          </div>
        </div>
      </section><!--B: Bindding participate application-->
        break;

      case ApplicationState.BuyerFound:
      <section class="pb-bpa b-ab b-ab_customise_full-custom">
        <header class="b-ab__title"><i class="b-ab__icon fa fa-tasks"></i>@Logic.Properties.GeneralResources.BiddingParticipateApplication</header>

        <div class="b-ab__content pb-bpa__content">
          @BuyerFoundState((Model as IBiddingParticipateApplicationBuyerFoundModel).BiddingParticipateApplicationBuyerFoundModel.BuyRequests)
        </div>
      </section><!--B: Bindding participate application-->
        break;
      case ApplicationState.Accepted:
      <section class="pb-bpa b-ab b-ab_customise_full-custom pb-bpa_state_accepted">
        <header class="b-ab__title"><i class="b-ab__icon fa fa-tasks"></i>@Logic.Properties.GeneralResources.BiddingParticipateApplication</header>

        <div class="b-ab__content pb-bpa__content">
          @AcceptedState((Model as IBiddingParticipateApplicationAcceptedModel).BiddingParticipateApplicationAcceptedModel)
        </div>
      </section><!--B: Bindding participate application-->
        break;
    }
  }
  else
  {
    <section class="pb-bpa b-ab">
      <header class="b-ab__title"><i class="b-ab__icon fa fa-tasks"></i>@Logic.Properties.GeneralResources.BiddingParticipateApplication</header>

      <div class="b-ab__content pb-bpa__content pb-bpa__content_content-type_banned-content">
        <p class="b-bpa__text b-bpa__text_message_is-banned">@MLMExchange.Properties.ResourcesA.BiddingParticipateApplication_IsBanned</p>
      </div>
    </section><!--B: Bindding participate application-->
  }
}
