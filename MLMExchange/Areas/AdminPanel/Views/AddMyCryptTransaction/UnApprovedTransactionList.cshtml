@using Ext.Net
@using Ext.Net.MVC
@model IEnumerable<MLMExchange.Areas.AdminPanel.Models.User.AddMyCryptModel>

@{
    ViewBag.Title = MLMExchange.Properties.PrivateResource.UnApprovedTransactionList;
    Layout = "~/Areas/AdminPanel/Views/Shared/_AdminPanel__Layout.cshtml";

    var X = Html.X();
}

<script data-app-script='true'>
  function UnApprovedTransactionList__Grid__CommandClickHandler(command, record) {
    if (command == "GetAdditionalInformation") {
      new Ext.Window({
        id: "AddMyCryptTransaction_AdditionalInformation__Window",
        width: 600,
        height: 600,
        modal: true,
        title: "@Logic.Properties.GeneralResources.AddMyCryptTransaction",
        autoScroll: true,
        autoLoad: {
          url: "/AdminPanel/AddMyCryptTransaction/Browse",
          params: { objectId: record.data.Id, AsPartial: true },
          nocache: true,
          text: "@MLMExchange.Properties.ResourcesA.Loading",
          callback: function () {
            $.each($("#AddMyCryptTransaction_AdditionalInformation__Window").find("script[data-app-script='true']"), function (index, element) {
              var scriptTag = $(document.createElement('script')).text($(element).text());

              $(scriptTag).appendTo($("body"));
            });
          }
        }
      }).show();
    }
    else if (command == "Accept") {
      var confirmMessage = "@String.Format(MLMExchange.Properties.ResourcesA.ConfirmActionMessage, MLMExchange.Properties.ResourcesA.Accept)";

      Ext.MessageBox.confirm("@MLMExchange.Properties.ResourcesA.ConfirmActionTitle", confirmMessage, function (btn) {
        if (btn == "yes") {
          $.ajax({
            url: "/AddMyCryptTransaction/AcceptTransaction?transactionId=" + record.data.Id,
            type: "POST"
          }).done(function () {
            window.location.reload();
          });
        }
      });
    }
    else if (command == "Denied") {
      var confirmMessage = "@String.Format(MLMExchange.Properties.ResourcesA.ConfirmActionMessage, MLMExchange.Properties.ResourcesA.Denied)";

      Ext.MessageBox.confirm("@MLMExchange.Properties.ResourcesA.ConfirmActionTitle", confirmMessage, function (btn) {
        if (btn == "yes")
        {
          $.ajax({
            url: "/AddMyCryptTransaction/DeniedTransaction?transactionId=" + record.data.Id,
            type: "POST"
          }).done(function() {
            window.location.reload();
          });
        }
      });
    }
  }
</script>

@{
  var transactionGrid = X.GridPanel()
    .ID("UnApprovedTransactionList__Grid")
    .Layout(LayoutType.Fit)
    .Title(MLMExchange.Properties.PrivateResource.UnApprovedTransactionList)
    .Border(false)
    .Store(
      X.Store()
      .RemotePaging(true)
      .PageSize(10)
      .DataSource(Model)
      .Model(X.Model().Fields(
          new ModelField { Name = "Id", ServerMapping = "Id" },
          new ModelField { Name = "CreationDateTime", ServerMapping = "CreationDateTime" },
          new ModelField { Name = "Initiator__Login", ServerMapping = "Initiator.Login" },
          new ModelField { Name = "MyCryptCount", ServerMapping = "MyCryptCount" }
      )))
      .ColumnModel(
        X.RowNumbererColumn(),
        X.Column().Text(Logic.Properties.GeneralResources.CreationDateTime).DataIndex("CreationDateTime").Flex(1),
        X.Column().Text(Logic.Properties.GeneralResources.Login).DataIndex("Initiator__Login").Flex(1),
        X.Column().Text(Logic.Properties.GeneralResources.MyCryptCount).DataIndex("MyCryptCount").Flex(1),
        X.ImageCommandColumn().Commands(
          X.ImageCommand().CommandName("GetAdditionalInformation").Icon(Icon.Information).Text(MLMExchange.Properties.ResourcesA.Information),
          X.ImageCommand().CommandName("Accept").Icon(Icon.Accept).Text(MLMExchange.Properties.ResourcesA.Accept),
          X.ImageCommand().CommandName("Denied").Icon(Icon.Decline).Text(MLMExchange.Properties.ResourcesA.Denied)
        ).Width(150)
        .Listeners(ls =>
        {
          ls.Command.Handler = String.Format("UnApprovedTransactionList__Grid__CommandClickHandler(command, record);");
        }));
}

@{
  (ViewData["AdminPanel__CenterBlock"] as Panel.Builder).Items(transactionGrid);
}
