@using Ext.Net
@using Ext.Net.MVC

@model MLMExchange.Areas.AdminPanel.Models.User.SalesPeople.SalesPeopleModel

@{
  ViewBag.Title = MLMExchange.Properties.ResourcesA.SalesPeople;
  Layout = "~/Areas/AdminPanel/Views/Shared/_AdminPanel__Layout.cshtml";
  var X = Html.X();
}
<script data-app-script='true'>
  function BuyMyCrypt__PopUpWindow__AfterRender(commandArguments) {
    //#region Дефолтные параметры для формы
    require(["jquery", "Lib/Form"], function ($, formModule) {
      new formModule.Form($("#AddMyCrypt__Form")).ReBindAll();
    });
    //#endregion

    $(".pb-bmc #SellerId").val(commandArguments.Seller__Id);
  }

  function ShowUserInfo(record)
  {
    new Ext.Window({
      id: "SalesPeople_ShwoUserInfo__Window",
      width: 800,
      height: 400,
      modal: true,
      resizable: false,
      title: "@MLMExchange.Properties.ResourcesA.Information",
      autoScroll: true,
      autoLoad: {
        url: "/AdminPanel/User/Browse",
        params: { objectId: record, AsPartial: true },
        nocache: true,
        text: "@MLMExchange.Properties.ResourcesA.Loading",
        callback: function () {
          $.each($("#SalesPeople_ShwoUserInfo__Window").find("script[data-app-script='true']"), function (index, element) {
            var scriptTag = $(document.createElement('script')).text($(element).text());

            $(scriptTag).appendTo($("body"));
          });
        }
      }
    }).show();
  }

  function SalesPeopleActiveSales__Grid__CommandClickHandler(command, record) {
    console.log(command);
    console.log(record);

    if (command == "ShowUserInfo") {
      new Ext.Window({
        id: "SalesPeople_ShwoUserInfo__Window",
        width: 800,
        height: 400,
        modal: true,
        resizable: false,
        title: "@MLMExchange.Properties.ResourcesA.Information",
        autoScroll: true,
        autoLoad: {
          url: "/AdminPanel/User/Browse",
          params: { objectId: record.data.Seller__Id, AsPartial: true },
          nocache: true,
          text: "@MLMExchange.Properties.ResourcesA.Loading",
          callback: function () {
            $.each($("#SalesPeople_ShwoUserInfo__Window").find("script[data-app-script='true']"), function (index, element) {
              var scriptTag = $(document.createElement('script')).text($(element).text());

              $(scriptTag).appendTo($("body"));
            });
          }
        }
      }).show();
    }
  }

  function BuyingRequest__History__State__Renderer(value, metaData, record, row, col, store, gridView) {
    var stateTag = "<div class='pb-br__state pb-br__state_value_" + value.toLowerCase() + "' >" + record.data.LocalisedStateDisplayName + "</div>";
    if (value.toLowerCase() === "accepted") {

      if (Boolean(record.data.IsCheckBillPaid) === false) {
        var resultTag = "<div class='pb-br__content' id='pb-br__content_ID'>";
        resultTag += stateTag;

        var messageTag = "<div class='pb-br__message'>@(MvcHtmlString.Create(String.Format(MLMExchange.Properties.PrivateResource.NeedCheckPayment,
          "\" + record.data.CheckBill__MoneyAmount + \" руб.")))</div>";
        resultTag += messageTag;

        var imageLinkTag = $("<a></a>").addClass("pb-br__image-link pb-br__image-link_action_check-payment").attr("href", "#").attr("data-request-id", record.data.Id)
          .html("<i class='pb-br__icon fa fa-money'></i>@MLMExchange.Properties.ResourcesA.Pay");

        resultTag += imageLinkTag[0].outerHTML;

        resultTag += "</div>";

        return resultTag;
      }
      else if (Boolean(record.data.IsSellerInterestRatePaid_NeedSubstantialMoney) === true) {
        var resultTag = "<div class='pb-br__content' id='pb-br__content_ID'>";
        resultTag += stateTag;

        var messageTag = "<div class='pb-br__message'>@(MvcHtmlString.Create(String.Format(MLMExchange.Properties.PrivateResource.RequirePayInterestRateToSaller,
          "\" + record.data.SystemSettings_Quote + \"",
          "\" + record.data.SallerInterestRateBill__MoneyAmount + \"")))</div>";
        resultTag += messageTag;

        var imageLinkTag = $("<a></a>").addClass("pb-br__image-link pb-br__image-link_action_pay-saller-interest-rate").attr("href", "#")
            .attr("data-request-id", record.data.Id)
            .attr("data-seller-id", record.data.Seller__Id)
            .attr("data-trade-session-id", record.data.TradeSessionId)
            .html("<i class='pb-br__icon fa fa-money'></i> @MLMExchange.Properties.ResourcesA.Pay");

        resultTag += imageLinkTag[0].outerHTML;

        resultTag += "</div>";

        return resultTag;
      }
      else if (Boolean(record.data.IsSellerInterestRatePaid) === false) {
        var resultTag = "<div class='pb-br__content' id='pb-br__content_ID'>";

        var messageTag = "<div class='pb-br__message'>@MLMExchange.Properties.PrivateResource.WaitingSellerInterestRatePayment_Accept</div>";
        resultTag += messageTag;

        resultTag += "</div>";

        return resultTag;
      }
      else if (Boolean(record.data.IsSellerInterestRatePaid) === true) {
        var resultTag = "<div class='pb-br__content' id='pb-br__content_ID'>";
        resultTag += stateTag;

        resultTag += "</div>";

        return resultTag;
      }
    }
    else {
      return stateTag;
    }
  }

  function BuyingRequest__History_AfterRender() {
    var view = this.getView();

    view.on('refresh', function () {
      //#region Обработчик события нажатия кнопки Оплатить проверочный платеж
      $(".pb-br__image-link_action_check-payment").on("click", function () {
        new Ext.Window({
          id: "PayCheckBill__Window",
          width: 600,
          minHeight: 100,
          modal: true,
          autoScroll: true,
          title: "@MLMExchange.Properties.PrivateResource.PayChechBillTitle",
          autoLoad: {
            url: "/BuyingMyCryptRequest/CheckPayment",
            params: { buyingMyCryptRequestId: $(this).data("request-id") },
            nocache: true,
            text: "@MLMExchange.Properties.ResourcesA.Loading",
            callback: function () {
              $.each($("#PayCheckBill__Window").find("script[data-app-script='true']"), function (index, element) {
                var scriptTag = $(document.createElement('script')).text($(element).text());

                $(scriptTag).appendTo($("body"));
              });

              var $form = $("#PayCheckBill__Window").find("form");

              if ($form.length > 0) {
                require(["jquery", "Lib/Form"], function ($, formModule) {
                  new formModule.Form($("#PayCheckBill__Window").find("form")).ReBindAll();
                });
              }
              else {
                setTimeout(function () { window.location.reload(); }, 2000);
              }
            }
          }
        }).show();
      });
      //#endregion

      //#region Обработчик события нажатия кнопки Оплатить процентную ставку продавцу
      $(".pb-br__image-link_action_pay-saller-interest-rate").on("click", function () {
        var sellerId = $(this).data("seller-id");
        var tradeSessionId = $(this).data("trade-session-id");

        new Ext.Window({
          id: "PaySellerInterestRate__Window",
          width: 800,
          height: 600,
          modal: true,
          autoScroll: true,
          title: "@Logic.Properties.GeneralResources.PaymentSystemGroup",
          autoLoad: {
            url: "/AdminPanel//PaymentSystemGroup/Browse",
            params: { ForUserId: sellerId, IsRequireSallerInterestRatePayment: true, TradeSessionId: tradeSessionId },
            nocache: true,
            text: "@MLMExchange.Properties.ResourcesA.Loading",
            callback: function () {
              $.each($("#PaySellerInterestRate__Window").find("script[data-app-script='true']"), function (index, element) {
                var scriptTag = $(document.createElement('script')).text($(element).text());

                $(scriptTag).appendTo($("body"));
              });
            }
          }
        }).show();
      });
      //#endregion
    }, this);
  };

  function SalesPeople_All_Grid__DisplayNameRenderer(value, metaData, record, row, col, store, gridView)
  {

    var $displayName = $("<a></a>").css({ "border-bottom": "1px dashed #dfdfdf", "cursor": "pointer" }).attr("onclick", "ShowUserInfo(" + record.data.Seller__Id + ");");

    $displayName.text(value);

    return $displayName[0].outerHTML;
  }
</script>

@{
  AbstractComponent buyMCContainer;

  if (!Model.IsCurrentUserBuyMCDisabled)
  {
    buyMCContainer = X.GridPanel().ID("SalesPeople__Grid")
    .Title(MLMExchange.Properties.ResourcesA.SalesPeople)
    .Layout(LayoutType.Fit)
    .Height(375)
    .Store(
      X.Store()
      .ID("SalesPeople__Store")
      .RemotePaging(true)
      .PageSize(10)
      .RemoteSort(true)
      .SorterFor(Model.ActiveSales, m => m.CreationDateTime, Ext.Net.SortDirection.ASC)
      .DataSource(Model.ActiveSales)
      .Model(X.Model()
           .Fields(
             new ModelField { Name = "Id" },
             new ModelField { Name = "Seller__Id", Mapping = "Seller.Id" },
             new ModelField { Name = "Seller__DisplayName", Mapping = "Seller.DisplayName" },
             new ModelField { Name = "MyCryptCount" },
             new ModelField { Name = "BasePaymentSystenName", Mapping = "PaymentSystemGroupModel.DefaultPaymentSystemDisplayName" }
            )
        )
      .Proxy(Html.X().AjaxProxy()
                            .Url(Url.Action("ActiveSalesGrid__Paginate"))
                            .Reader(Html.X().JsonReader().Root("data"))))
      .ColumnModel(
        X.RowNumbererColumn(),
        X.Column().Text(Logic.Properties.GeneralResources.Name).DataIndex("Seller__DisplayName").Flex(1)
          .Renderer("SalesPeople_All_Grid__DisplayNameRenderer"),
        X.Column().Text(Logic.Properties.GeneralResources.MyCryptCount).DataIndex("MyCryptCount").Flex(1),
        X.Column().Text(Logic.Properties.GeneralResources.PaymentSystem).DataIndex("BasePaymentSystenName").Flex(1),
        X.ImageCommandColumn().Commands(

          X.ImageCommand().CommandName("BuyMyCrypt").Icon(Icon.Accept).Text("Купить"),
          X.ImageCommand().CommandName("ShowUserInfo").Icon(Icon.Information).Text(MLMExchange.Properties.ResourcesA.Information)
        ).Width(120)
        .Listeners(ls =>
        {
          ls.Command.Handler = "var commandArguments = arguments;" +
            "if(commandArguments[1] == 'BuyMyCrypt') {"
            + X.Window().ID("BuyMyCrypt__PopUpWindow").Modal(true).Width(700).Height(400).Title(@MLMExchange.Properties.ResourcesA.BuyMyCrypt)
             .Content(x => Html.Partial("~/Areas/AdminPanel/Views/User/SalesPeople/_BuyMyCrypt.cshtml",
                new MLMExchange.Areas.AdminPanel.Models.User.SalesPeople.BuyingMyCryptRequestModel()))
            .CloseAction(CloseAction.Destroy)
            .Resizable(false)
            .Listeners(w_ls =>
            {
              w_ls.AfterRender.Handler = "BuyMyCrypt__PopUpWindow__AfterRender(commandArguments[2].data);";
            }).ToScript()
          + "}else if(commandArguments[1] == 'ShowUserInfo') {" +
          "SalesPeopleActiveSales__Grid__CommandClickHandler(commandArguments[1], commandArguments[2]); }";

          //ls.Command.Handler = String.Format("SalesPeopleActiveSales__Grid__CommandClickHandler(command, record);");
        }))
        .BottomBar(
          X.PagingToolbar()
            .Plugins(X.ProgressBarPager())
        );
  }
  else
  {
    buyMCContainer = X.Container().Html(
      @<div class="b-brp">
        <span class="b-brp__message"><i class="b-brp__icon fa fa-exclamation-triangle"></i> @MLMExchange.Properties.PrivateResource.YouCantBuyMCNow</span>
      </div>
    );
  }
  
  var buyingRequestHistoryGrid = X.GridPanel().ID("BuyingRequest__History")
    .Title(MLMExchange.Properties.PrivateResource.BuyingMyCryptRequestHistory)
    .Layout(LayoutType.Fit)
    .Height(375)
    .Store(
      X.Store()
      .ID("BuyingRequest__Store")
      .RemotePaging(true)
      .PageSize(10)
      .RemoteSort(true)
      .SorterFor(Model.ActiveSales, m => m.CreationDateTime, Ext.Net.SortDirection.ASC)
      .DataSource(Model.HistoryApplication)
      .Model(X.Model().Fields(
          new ModelField { Name = "Seller__Id", Mapping = "Seller.Id" },
          new ModelField { Name = "Seller__DisplayName", Mapping = "Seller.DisplayName" },
          new ModelField { Name = "MyCryptCount" },
          new ModelField { Name = "LocalisedStateDisplayName" },
          new ModelField { Name = "IsCheckBillPaid" },
          new ModelField { Name = "IsSellerInterestRatePaid" },
          new ModelField { Name = "IsSellerInterestRatePaid_NeedSubstantialMoney" },
          new ModelField { Name = "TradeSessionId" },
          new ModelField { Name = "State" },
          new ModelField { Name = "Id" },
          new ModelField { Name = "CheckBill__MoneyAmount", Mapping = "CheckBill.MoneyAmount" },
          new ModelField { Name = "SallerInterestRateBill__MoneyAmount", Mapping = "SallerInterestRateBill.MoneyAmount" },
          new ModelField { Name = "SystemSettings_Quote", Mapping = "SystemSettings.Quote" }
      ))
      .Proxy(Html.X().AjaxProxy()
                     .Url(Url.Action("HistoryApplicationGrid__Paginate"))
                     .Reader(Html.X().JsonReader().Root("data"))))
      .ColumnModel(
        X.RowNumbererColumn(),
        X.Column().Text(MLMExchange.Properties.ResourcesA.SellerName).DataIndex("Seller__DisplayName").Flex(1)
            .Renderer("SalesPeople_All_Grid__DisplayNameRenderer"),
        X.Column().Text(Logic.Properties.GeneralResources.MyCryptCount).DataIndex("MyCryptCount").Flex(1),
        X.Column().Width(170).Text(MLMExchange.Properties.ResourcesA.State).DataIndex("State").Renderer("BuyingRequest__History__State__Renderer")
        )
      .Listeners(ls => ls.AfterRender.Fn = "BuyingRequest__History_AfterRender")
      .BottomBar(
          X.PagingToolbar()
            .Plugins(X.ProgressBarPager())
        );
}

@{
  (ViewData["AdminPanel__CenterBlock"] as Panel.Builder).Items(buyMCContainer, buyingRequestHistoryGrid);
}


