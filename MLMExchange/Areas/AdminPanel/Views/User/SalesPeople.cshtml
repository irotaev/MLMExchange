@using Ext.Net
@using Ext.Net.MVC

@model MLMExchange.Areas.AdminPanel.Models.User.SalesPeople.SalesPeopleModel

@{
  ViewBag.Title = MLMExchange.Properties.ResourcesA.SalesPeople;
  Layout = "~/Areas/AdminPanel/Views/Shared/_AdminPanel__Layout.cshtml";
  var X = Html.X();
}


<script>
  //#region Парсим форму валидатором еще раз, т.к. форма подгружается динамически
  function validator__Parse() {
    window.$Sync.validator.unobtrusive.parse('#AddMyCrypt__Form');
  }
  //#endregion

  function BuyMyCrypt__PopUpWindow__AfterRender(commandArguments) {
    $(".pb-bmc #SellerId").val(commandArguments.SellerUser__Id);
  }

  function BuyingRequest__History__State__Renderer(value, metaData, record, row, col, store, gridView) {
    var stateTag = "<div class='pb-br__state pb-br__state_value_" + value.toLowerCase() + "' >" + record.data.LocalisedStateDisplayName + "</div>";
    if (value.toLowerCase() === "accepted") {

      if (Boolean(record.data.IsCheckBillPaid) === false) {
        var resultTag = "<div class='pb-br__content' id='pb-br__content_ID'>";
        resultTag += stateTag;

        var messageTag = "<div class='pb-br__message'>@(MvcHtmlString.Create(String.Format(MLMExchange.Properties.PrivateResource.NeedCheckPayment,
          "\" + record.data.CheckBill__MoneyAmount + \"")))</div>";
        resultTag += messageTag;

        var imageLinkTag = $("<a></a>").addClass("pb-br__image-link pb-br__image-link_action_check-payment").attr("href", "#").attr("data-request-id", record.data.Id)
          .html("<i class='pb-br__icon fa fa-money'></i>@MLMExchange.Properties.ResourcesA.Pay");

        resultTag += imageLinkTag[0].outerHTML;
        
        resultTag += "</div>";

        return resultTag;
      }
      else if (Boolean(record.data.IsSellerInterestRatePaid_NeedSubstantialMoney) === true) {
        var resultTag = "<div class='pb-br__content' id='pb-br__content_ID'>";
        resultTag += stateTag;

        var messageTag = "<div class='pb-br__message'>@(MvcHtmlString.Create(String.Format(MLMExchange.Properties.PrivateResource.RequirePayInterestRateToSaller,
          "\" + record.data.SallerInterestRateBill__MoneyAmount + \"")))</div>";
          resultTag += messageTag;

          var imageLinkTag = $("<a></a>").addClass("pb-br__image-link pb-br__image-link_action_pay-saller-interest-rate").attr("href", "#")
              .attr("data-request-id", record.data.Id)
              .attr("data-seller-id", record.data.SellerId)
              .attr("data-trade-session-id", record.data.TradeSessionId)
              .html("<i class='pb-br__icon fa fa-money'></i> @MLMExchange.Properties.ResourcesA.Pay");

        resultTag += imageLinkTag[0].outerHTML;

        resultTag += "</div>";

        return resultTag;
      }
      else if (Boolean(record.data.IsSellerInterestRatePaid) === false) {
        var resultTag = "<div class='pb-br__content' id='pb-br__content_ID'>";

        var messageTag = "<div class='pb-br__message'>@MLMExchange.Properties.PrivateResource.WaitingSellerInterestRatePayment_Accept</div>";
        resultTag += messageTag;

        resultTag += "</div>";

        return resultTag;
      }
      else if (Boolean(record.data.IsSellerInterestRatePaid) === true) {
          var resultTag = "<div class='pb-br__content' id='pb-br__content_ID'>";
          resultTag += stateTag;

          resultTag += "</div>";

          return resultTag;
      }
    }
    else 
    {
      return stateTag;
    }
  }

  function BuyingRequest__History_AfterRender() {
    var view = this.getView();

    view.on('refresh', function () {
      //#region Обработчик события нажатия кнопки Оплатить проверочный платеж
        $(".pb-br__image-link_action_check-payment").on("click", function () {
        
        $.ajax({
          url: "/BuyingMyCryptRequest/CheckPayment/?buyingMyCryptRequestId=" + $(this).data("request-id"),
          async: false,
          type: "POST"
        })
        .done(function () { window.location.reload(); });
      });
      //#endregion

      //#region Обработчик события нажатия кнопки Оплатить процентную ставку продавцу
        $(".pb-br__image-link_action_pay-saller-interest-rate").on("click", function () {
            var sellerId = $(this).data("seller-id");
            var tradeSessionId = $(this).data("trade-session-id");

            new Ext.Window({
                id: "PaySellerInterestRate__Window",
                width: 800,
                height: 800,
                modal: true,
                title: "@Logic.Properties.GeneralResources.PaymentSystemGroup",
                autoLoad: {
                    url: "/AdminPanel//PaymentSystemGroup/Browse",
                    params: { ForUserId: sellerId, IsRequireSallerInterestRatePayment: true, TradeSessionId: tradeSessionId },
                    nocache: true,
                    text: "@MLMExchange.Properties.ResourcesA.Loading",
                    callback: function () {
                        $.each($("#PaySellerInterestRate__Window").find("script[data-app-script='true']"), function (index, element) {
                            var scriptTag = $(document.createElement('script')).text($(element).text());

                            $(scriptTag).appendTo($("body"));
                        });
                    }
                }
            }).show();
      });
      //#endregion
    }, this);
  };
</script>

@{var selesPeopleGrid = X.GridPanel().ID("SalesPeople__Grid")
    .Title(MLMExchange.Properties.ResourcesA.SalesPeople)
    .Layout(LayoutType.Fit)
    .Height(375)
    .Store(
      X.Store()
      .RemotePaging(true)
      .PageSize(10)
      .DataSource(Model.ActiveSales)
      .Model(X.Model().Fields(
          new ModelField { Name = "Seller", ServerMapping = "Seller.Name" },
          new ModelField { Name = "MyCryptCount" },
          new ModelField { Name = "SellerUser__Id", ServerMapping = "Seller.Id" }
      )))
      .ColumnModel(
        X.RowNumbererColumn(),
        X.Column().Text(Logic.Properties.GeneralResources.Name).DataIndex("Seller").Flex(1),
    //X.TemplateColumn().TemplateString(@<div>Hellow {MyCryptCount}</div>),
        X.Column().Text("MyCryptCount").DataIndex("MyCryptCount").Flex(1),
        X.ImageCommandColumn().Commands(
          X.ImageCommand().CommandName("BuyMyCrypt").Icon(Icon.Accept).Text("Купить")
        )
        .Listeners(ls =>
        {
          ls.Command.Handler = "var commandArguments = arguments; " + X.Window().ID("BuyMyCrypt__PopUpWindow").Modal(true).Width(700).Height(400).Title("Hellow world!")
             .Content(x => Html.Partial("~/Areas/AdminPanel/Views/User/SalesPeople/_BuyMyCrypt.cshtml",
                new MLMExchange.Areas.AdminPanel.Models.User.SalesPeople.BuyingMyCryptRequestModel()))
            .CloseAction(CloseAction.Destroy)
            .Resizable(false)
            .Listeners(w_ls =>
            {
              w_ls.AfterRender.Handler = "validator__Parse(); BuyMyCrypt__PopUpWindow__AfterRender(commandArguments[2].data);";
            }).ToScript();
        }));

  var buyingRequestHistoryGrid = X.GridPanel().ID("BuyingRequest__History")
    .Title(MLMExchange.Properties.PrivateResource.BuyingMyCryptRequestHistory)
    .Layout(LayoutType.Fit)
    .Height(375)
    .Store(
      X.Store()
      .RemotePaging(true)
      .PageSize(10)
      .DataSource(Model.HistoryApplication)
      .Model(X.Model().Fields(
          new ModelField { Name = "SellerId", ServerMapping = "Seller.Id" },
          new ModelField { Name = "SellerName", ServerMapping = "Seller.Name" },
          new ModelField { Name = "SellerSurname", ServerMapping = "Seller.Surname" },
          new ModelField { Name = "MyCryptCount" },
          new ModelField { Name = "LocalisedStateDisplayName" },          
          new ModelField { Name = "IsCheckBillPaid" },
          new ModelField { Name = "IsSellerInterestRatePaid" },
          new ModelField { Name = "IsSellerInterestRatePaid_NeedSubstantialMoney" },
          new ModelField { Name = "TradeSessionId" },
          new ModelField { Name = "State" },
          new ModelField { Name = "Id" },
          new ModelField { Name = "CheckBill__MoneyAmount", ServerMapping = "CheckBill.MoneyAmount" },
          new ModelField { Name = "SallerInterestRateBill__MoneyAmount", ServerMapping = "SallerInterestRateBill.MoneyAmount" }
      )))
      .ColumnModel(
        X.RowNumbererColumn(),
        X.Column().Text(MLMExchange.Properties.ResourcesA.SellerName).DataIndex("SellerName").Flex(1),
        X.Column().Text(MLMExchange.Properties.ResourcesA.SellerSurname).DataIndex("SellerSurname").Flex(1),
        X.Column().Text("MyCryptCount").DataIndex("MyCryptCount").Flex(1),
        X.Column().Width(170).Text(MLMExchange.Properties.ResourcesA.State).DataIndex("State").Renderer("BuyingRequest__History__State__Renderer")
        )
      .Listeners(ls => ls.AfterRender.Fn = "BuyingRequest__History_AfterRender");
}

@{
(ViewData["AdminPanel__CenterBlock"] as Panel.Builder).Items(selesPeopleGrid, buyingRequestHistoryGrid);
}


